generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  username String
  spaces Space[]
  memberships Membership[]
}

model Space {
  id Int @id @default(autoincrement())
  name String
  isPrivate Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  creatorId Int?
  creator User? @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  members Membership[]
  chats Chat[]
}

model Membership {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  spaceId Int
  userId Int
  roleId Int?
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role? @relation(fields: [roleId], references: [id], onDelete: SetNull)
  messages Message[]
  chats ChatsOnMemberships[]
}

model Role {
  id Int @id @default(autoincrement())
  type RoleType @unique
  members Membership[]
}

model Chat {
  id Int @id @default(autoincrement())
  name String?
  messages Message[]
  members ChatsOnMemberships[]
  spaceId Int
  chatTypeId Int?
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  type ChatType? @relation(fields: [chatTypeId], references: [id], onDelete: SetNull)
}

model ChatType {
  id Int @id @default(autoincrement())
  name ChatTypeName @unique
  chats Chat[]
}

model Message {
  id Int @id @default(autoincrement())
  content String
  authorId Int?
  chatId Int
  author Membership? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model ChatsOnMemberships {
  chatId Int
  memberId Int
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  member Membership @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@id([chatId, memberId])
}

enum RoleType {
  Chatter
  Moderator
  Admin
}

enum ChatTypeName {
  DirectMessage
  Channel
}
